@using Blazored.Toast.Services
@using College.UI.Interfaces
@using College.UI.Models.Student
@inject Radzen.DialogService dialogService

@if (isLoading)
{
    <p>Loading...</p>
}

else if (!string.IsNullOrEmpty(errorMessage))
{
    <p>Error: @errorMessage</p>
}
else if (Students == null || !Students.Any())
{
    <p>No students found.</p>
}

else
{
    <div class="cards-container d-flex">
        @foreach (var student in Students)
        {
            <RadzenCard Class="m-1 custom-card">
                <div class="icon-text">
                    <RadzenHeading Size="H4" Text="Student Information" />
                </div>
                <div class="d-flex card-content flex-wrap">
                    <div class="card-item">
                        <RadzenText TextStyle="TextStyle.Subtitle2" Class="rz-m-0" Style="color: var(--rz-text-cool-color);">Name</RadzenText>
                        <RadzenText Size="Small" TextStyle="TextStyle.Body1" Class="rz-text-truncate" Style="color: var(--rz-text-disabled-color);">@student.Name, @student.LastName</RadzenText>
                    </div>
                   @*  <div class="card-item">
                        <RadzenText TextStyle="TextStyle.Subtitle2" Class="rz-m-0" Style="color: var(--rz-text-cool-color);">Last Name</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1" Class="rz-text-truncate" Style="color: var(--rz-text-disabled-color);">@student.LastName</RadzenText>
                    </div> *@
                    <div class="card-item">
                        <RadzenText TextStyle="TextStyle.Subtitle2" Class="rz-m-0" Style="color: var(--rz-text-cool-color);">Gender</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1" Class="rz-text-truncate" Style="color: var(--rz-text-disabled-color);">@student.Gender</RadzenText>
                    </div>
                    <div class="card-item">
                        <RadzenText TextStyle="TextStyle.Subtitle2" Class="rz-m-0" Style="color: var(--rz-text-cool-color);">Birth Date</RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1" Class="rz-text-truncate" Style="color: var(--rz-text-disabled-color);">@student.BirthDate.ToShortDateString()</RadzenText>
                    </div>
                    <div class="card-item">
                        <RadzenButton Text="Update" ButtonStyle="ButtonStyle.Warning" Click="@(args => OpenUpdateStudentModal(student.StudentId))" />
                        <RadzenButton Text="Delete" ButtonStyle="ButtonStyle.Danger" Click="@(args => DeleteStudent(student.StudentId))" />
                    </div>
                </div>
            </RadzenCard>
        }
    </div>
}



@code {
    #region Properties

    //private new List<GetAllStudentsQueryResult> AllStudentsQueryResult { get; set; } = new List<GetAllStudentsQueryResult>();
    [Parameter] public List<GetAllStudentsQueryResult> Students { get; set; } = new List<GetAllStudentsQueryResult>();
    #endregion

    #region Services
    [Inject] private IStudentService _studentService { get; set; }
    [Inject] private IToastService _toastService { get; set; }
    #endregion

    private bool isLoading = true;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await ReloadStudentsAsync();
    }

    public async Task ReloadStudentsAsync()
    {
        isLoading = true;
        try
        {
            Students = await _studentService.GetAllStudentsAsync();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadStudentsAsync()
    {
        Students = await _studentService.GetAllStudentsAsync();
    }

    private async Task DeleteStudent(int studentId)
    {
        var confirmed = await dialogService.Confirm($"¿Seguro que quieres borrar el estudiante?",
            "Confirmación",
            new ConfirmOptions { OkButtonText = "Sí", CancelButtonText = "No" });

        if (confirmed == true)
        {
            var result = await _studentService.RemoveStudentAsync(studentId);

            if (!result.IsError && result.Success)
            {
                _toastService.ShowInfo($"El estudiante ha sido borrado correctamente.");
                await LoadStudentsAsync();
            }
            else
            { 
                _toastService.ShowError($"Ha ocurrido un error borrando el estudiante.");
            }
        }
    }

    private async Task OpenUpdateStudentModal(int studentId)
    {
        var student = await _studentService.GetStudentByIdAsync(studentId);
        if (student != null)
        {
            var updStudentInput = new UpdateStudentInput
            {
                
                StudentId = student.StudentId,
                Name = student.Name,
                LastName = student.LastName,
                Gender = student.Gender,
                BirthDate = student.BirthDate
                 
            };

            var result = await dialogService.OpenAsync<UpdateStudent>("",
                    new Dictionary<string, object> { { "UpdStudentInput", updStudentInput } });

            if (result == true)
            {
                await LoadStudentsAsync();
            }
        } 
    }
}

<style>
    .cards-container {
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        justify-content: space-around;
    }

        .cards-container .custom-card {
            flex-basis: 70%;
            margin: 1em;
        }

    .custom-card {
        min-height: 155px;
        max-width: 320px;
        flex: 1;
        display: flex;
        flex-direction: column;
        margin: auto;
        padding: 10px;
        box-sizing: border-box;
        border-radius: 10%;
        transition: all 0.3s ease;
    }

        .custom-card:hover {
            transform: scale(1.05);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /*sombra al hacer hover */
        }

    .card-content {
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        justify-content: normal;
    }

    .card-item {
        flex-basis: calc(50% - 10px);
        margin-bottom: 10px;
    }
</style>
