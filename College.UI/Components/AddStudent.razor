@using Blazored.Toast.Services
@using College.UI.Interfaces
@using College.UI.Models.Student
@inject Radzen.DialogService dialogService


<RadzenTemplateForm Data="@AddStudentInput" TItem="StudentInput" Submit="@((StudentInput args) => { AddStudentDataAsync(args); })">
    <RadzenFieldset Text="Student Info">
        <RadzenLabel Text="Name" />
        <RadzenTextBox @bind-Value="@AddStudentInput.StudentName" Style="width: 100%;" />

        <RadzenLabel Text="LastName" />
        <RadzenTextBox @bind-Value="@AddStudentInput.StudentLastName" Style="width: 100%;" />

        <RadzenLabel Text="Gender" />
        <RadzenDropDown @bind-Value="@AddStudentInput.StudentGender" Data="@(new List<string> { "Masculino", "Femenino" })" Style="width: 100%;" />

        <RadzenLabel Text="Birth Date" />
        <RadzenDatePicker @bind-Value="@AddStudentInput.StudentBirthDate" Style="width: 100%;" />
    </RadzenFieldset>

    <RadzenButton Text="Save" ButtonStyle="ButtonStyle.Info" Type="Submit" Style="margin-top: 20px;" />
</RadzenTemplateForm>

@code {
    #region Properties
    private StudentInput AddStudentInput = new StudentInput();
    #endregion

    #region Fields
    private bool isLoading = false;
    #endregion

    #region Services
    [Inject] private IStudentService _studentService { get; set; }
    [Inject] private IToastService _toastService { get; set; }
    #endregion

    // private void validateLetters(changeEventargs args, string propNames)
    // {
    //     var nameInput = args.value?.ToString();
    //     if (!string.IsNullOrEmpty(nameInput) && !System.Text.RegularExpressions.Regex.Match(nameInput, @"^[a-zA-Z_]+$"))
    //     {
    //         _toastService.ShowError("$el campo nombre")
    //     }
    // }

    public async Task AddStudentDataAsync(StudentInput args)
    {
        var confirmed = await dialogService.Confirm($"¿Seguro que quieres agregar este nuevo registro?",
            "Confirmación",
            new ConfirmOptions { OkButtonText = "Sí", CancelButtonText = "No" });

        if (confirmed == true)
        {
            var result = await _studentService.AddStudentAsync(AddStudentInput); 

            if (!result.IsError)
            {
                _toastService.ShowInfo($"El estudiante ha sido agregado correctamente.");
                dialogService.Close(true);
            }
            else
            {
                _toastService.ShowError($"Ha ocurrido un error al agregar el estudiante.");
            }
        }
    }
}


<style>
    .custom-studentCard {
        box-sizing: border-box;
        border-radius: 10%;
    }
</style>